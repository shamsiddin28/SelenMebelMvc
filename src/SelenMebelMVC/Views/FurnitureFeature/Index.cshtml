@model IEnumerable<SelenMebel.Service.DTOs.FurnitureFeatures.FurnitureFeatureForResultDto>
@{
	ViewData["Title"] = "FurnitureFeatures";
}

<h3 class="text-center mb-3">@ViewData["Title"]</h3>

@if (TempData["InfoMessage"] != null)
{
	<div class='alert alert-info alert-dismissible fade show' role='alert'>
		<strong>Information ! </strong> @TempData["InfoMessage"]
		<button type="button" class="close" data-ds-dismiss='alert' aria-label="Close">
			<span>&times;</span>
		</button>
	</div>
}
else if (TempData["SuccessMessage"] != null)
{
	<div class='alert alert-success alert-dismissible fade show' role='alert'>
		<strong>Success ! </strong> @TempData["SuccessMessage"]
		<button type="button" class="close" data-ds-dismiss='alert' aria-label="Close">
			<span>&times;</span>
		</button>
	</div>
}
else if (TempData["ErrorMessage"] != null)
{
	<div class='alert alert-danger alert-dismissible fade show' role='alert'>
		<strong>Error ! </strong> @TempData["ErrorMessage"]
		<button type="button" class="close" data-ds-dismiss='alert' aria-label="Close">
			<span>&times;</span>
		</button>
	</div>
}

<div class="row mb-2">
	<div class="col">
		<a id="createFeatureBtn" class='btn btn-primary' >Create New FurnitureFeature</a>
	</div>
	<div class="col">
	</div>
</div>

<div class="row mb-3">
	@using (Html.BeginForm("Index", "FurnitureFeature", FormMethod.Get))
	{
		<table>
			<tr>
				<td>
					<span><b>Search By:</b></span>
					@Html.RadioButton("searchBy", "UniqueId", true)
					<text>Unique Id</text>
					@Html.RadioButton("searchBy", "FeatureName")
					<text>Feature Name or Value</text>
					@Html.RadioButton("searchBy", "CategoryName")
					<text>Category Name</text>
					@Html.RadioButton("searchBy", "FurnitureName")
					<text>Furniture Name</text>
				</td>
			</tr>
			<tr>
				<td>
					@Html.TextBox("searchValue", null, new { Class = "form-control", placeholder = "Enter Feature or Furniture or Category Name or UniqueId" })
				</td>
				<td>
					&nbsp;
				</td>
				<td>
					<input type="submit" value="Search" class="btn btn-success" />
				</td>
			</tr>
		</table>
	}
</div>

<nav aria-label="Page navigation">
	<ul class="pagination justify-content-center">
		@{
			var pageIndex = ViewData["PageIndex"] != null ? (int)ViewData["PageIndex"] : 1;
			var pageSize = ViewData["PageSize"] != null ? (int)ViewData["PageSize"] : 10;
			var totalItems = ViewData["TotalItems"];
			var totalPages = ViewData["TotalItems"] != null ? (int)Math.Ceiling((int)totalItems / (double)pageSize) : 1;

			var searchBy = ViewData["SearchBy"];
			var searchValue = ViewData["SearchValue"];
		}

		@if (totalPages > 1)
		{
			<li class="page-item @(pageIndex == 1 ? "disabled" : "")">
				<a class="page-link" href="?pageIndex=1&pageSize=@pageSize&searchBy=@searchBy&searchValue=@searchValue">First</a>
			</li>
			<li class="page-item @(pageIndex == 1 ? "disabled" : "")">
				<a class="page-link" href="?pageIndex=@(pageIndex - 1)&pageSize=@pageSize&searchBy=@searchBy&searchValue=@searchValue">Previous</a>
			</li>

			@for (var i = 1; i <= totalPages; i++)
			{
				<li class="page-item @(pageIndex == i ? "active" : "")" aria-current="page">
					<a class="page-link" href="?pageIndex=@(i)&pageSize=@pageSize&searchBy=@searchBy&searchValue=@searchValue">@i</a>
				</li>
			}

			<li class="page-item @(pageIndex == totalPages ? "disabled" : "")">
				<a class="page-link" href="?pageIndex=@(pageIndex + 1)&pageSize=@pageSize&searchBy=@searchBy&searchValue=@searchValue">Next</a>
			</li>
			<li class="page-item @(pageIndex == totalPages ? "disabled" : "")">
				<a class="page-link" href="?pageIndex=@totalPages&pageSize=@pageSize&searchBy=@searchBy&searchValue=@searchValue">Last</a>
			</li>
		}
	</ul>
</nav>

<div style="height: 400px; overflow-y: auto;">
	<table class="table table-bordered table-responsive table-hover">
	<thead>
		<tr class="table-active">
			<th>
				@Html.DisplayNameFor(model => model.Name)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Value)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Furniture)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Furniture.UniqueId)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Furniture.TypeOfFurniture.Category)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.CreatedAt)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.UpdatedAt)
			</th>
			<th>
				Action
			</th>
		</tr>
	</thead>
	<tbody>
		@if (Model != null && Model.Any())
		{
			@foreach (var furnitureFeature in Model)
			{
				<tr>
					<td>
						@Html.DisplayFor(model => furnitureFeature.Name)
					</td>
					<td>
						@Html.DisplayFor(model => furnitureFeature.Value)
					</td>
					@if (!string.IsNullOrEmpty(furnitureFeature.Furniture.Name))
					{
						<td>
							@Html.DisplayFor(model => furnitureFeature.Furniture.Name)
						</td>
					}
					else
					{
						<td>
							<span style="color: red;">Name has no value !</span>
						</td>
					}
					<td>
						@Html.DisplayFor(model => furnitureFeature.Furniture.UniqueId)
					</td>
					<td>
						@Html.DisplayFor(model => furnitureFeature.Furniture.TypeOfFurniture.Category.Name)
					</td>
					<td>
						@Html.DisplayFor(model => furnitureFeature.CreatedAt)
					</td>
					<td>
						@Html.DisplayFor(model => furnitureFeature.UpdatedAt)
					</td>
					<td style="white-space:nowrap">
						<div class="btn-group btn-group-sm">
							<a asp-action="Edit" asp-route-id="@furnitureFeature.Id" class="btn btn-primary btn-sm">Edit</a>
							<a asp-action="Delete" asp-route-id="@furnitureFeature.Id" class="btn btn-danger btn-sm">Delete</a>
							<a asp-action="Create" asp-route-id="@furnitureFeature.Furniture.Id" class="btn btn-success btn-sm">AddFeature</a>
						</div>
					</td>
				</tr>
			}
		}
		else
		{
			<tr>
				<td colspan="8">
					<div>
						FurnitureFeatures not available in the database
					</div>
				</td>
			</tr>
		}
	</tbody>

</table>
</div>

<script>
	// Add click event listener to the button
	document.getElementById("createFeatureBtn").addEventListener("click", function () {
		// Get input value from the user
		var inputValue = prompt("Please enter the Furniture UniqueId:");

		// Make sure user entered a value
		if (inputValue !== null) {
			// Send AJAX request to the controller action
			fetch(`/FurnitureFeature/GetByFurnitureUniqueId?uniqueId=${inputValue}`, {
				method: 'GET', // Assuming you want to send a GET request
			})
				.then(response => {
					// Check if the response is successful
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					// Parse response as JSON
					return response.json();
				})
				.then(data => {
					// Extract the id from the response
					console.log(data);
					var id = data;

					// Redirect to the Create/Furniturefeature URL with the id as a query parameter
					window.location.href = `/FurnitureFeature/Create?id=${id}`;
				})
				.catch(error => {
					// Handle any errors that occurred during the fetch operation
					console.error('There was a problem with your fetch operation:', error);
				});
		}
	});
</script>
